#:include "common.fypp"

! Start timing fypp method
! We have experienced some problems with single.
! Say if the CPU is comprising a varying amount of
! efficiency vs. performance cores, then the timings
! can sometimes get negative... :(
! By enforcing a particular thread to do the timing
! we should remove this problem *fingers crossed*
#:def START_TIMING(in_teams=0)
   #:if in_teams == 0
      !$omp barrier
      !$omp master
      call timing%start()
      !$omp end master
   #:else
      if (team == 0) then
         call timing%start()
      end if
   #:endif
#:enddef

#:def STOP_TIMING(var, in_teams=0)
   #:if in_teams == 0
      !$omp barrier
      !$omp master
      call timing%stop()
      ${var}$ = timing%time
      !$omp end master
   #:else
      call timing%stop()
      ${var}$ = timing%time
   #:endif
#:enddef

! Short for doing type-is AND start timing
#:def TYPE_IS(name)
   type is (${name}$)
   @:START_TIMING()
#:enddef

! Since we allow multiple variations of array definitions.
! The complexity is hidden in the ARRAY_DEFINE method.
#:def ARRAY_DEFINE(dtype, size, *names)
   #:for name in names
      #:if ARRAY_IS_STACK
         real(${dtype}$) :: ${name}$ (${size}$)
      #:else
         real(${dtype}$), ${OMB_ALLOC_TYPE}$ &
            ${OMB_ARRAY_ATTRIBUTES}$ :: ${name}$ (:)
      #:endif
   #:endfor
#:enddef ARRAY_DEFINE

! Since we allow multiple variations of array definitions.
! The complexity is hidden in the ARRAY_DEALLOC method.
#:def ARRAY_DEALLOC(*names)
   #:for name in names
      #:if not ARRAY_IS_STACK
         deallocate (${name}$)
      #:endif
   #:endfor
#:enddef

module benchmarks_m

   ! Define the different methods for benchmarks
   use iso_fortran_env, only: real32, real64, real128
   use iso_fortran_env, only: ${OMB_INT_TYPE}$

   use omp_lib, only: omp_get_team_num

   use options_m
   use results_m, only: results_t
   use timing_m, only: timing_t

   implicit none
   private

   integer, public, parameter :: METHOD_NOT_SET = 0
   integer, public, parameter :: METHOD_ADD = 1
   integer, public, parameter :: METHOD_SCALE = 2
   integer, public, parameter :: METHOD_COPY = 3
   integer, public, parameter :: METHOD_TRIAD = 4
   integer, public, parameter :: METHOD_SUM = 5
   integer, public, parameter :: METHOD_AXPY = 6
   integer, public, parameter :: METHOD_FILL = 7
   integer, public, parameter :: METHOD_TRIAD_FALSE_SHARING = 8

   #:for real in REALS
      public :: bench_add_${real}$
      public :: bench_scale_${real}$
      public :: bench_copy_${real}$
      public :: bench_triad_${real}$
      public :: bench_sum_${real}$
      public :: bench_axpy_${real}$
      public :: bench_fill_${real}$
      public :: bench_triad_false_sharing_${real}$
   #:endfor

   public :: benchmark_method
   interface
      subroutine benchmark_method(n, options, results)
         use iso_fortran_env, only: ${OMB_INT_TYPE}$
         use options_m, only: options_t
         use results_m, only: results_t
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results
      end subroutine
   end interface

   interface array_allocate
      #:for real in REALS
         module procedure :: array_allocate_${real}$
      #:endfor
   end interface

   interface first_touch_serial
      #:for real in REALS
         module procedure :: first_touch_serial_${real}$
      #:endfor
   end interface
   interface first_touch_parallel
      #:for real in REALS
         module procedure :: first_touch_parallel_${real}$
      #:endfor
   end interface

   interface init_array
      #:for real in REALS
         module procedure :: init_array_${real}$
      #:endfor
   end interface

   character(len=*), parameter, private :: test_fmt = "(tr1,es17.9)"

contains

   #:for real in REALS

      subroutine array_allocate_${real}$ (n, a, options)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         #:if ARRAY_IS_STACK
            real(${real}$), intent(inout) :: a(n)
         #:else
            real(${real}$), dimension(:), intent(inout), ${OMB_ALLOC_TYPE}$ &
               ${OMB_ARRAY_ATTRIBUTES}$ :: a
         #:endif
         type(options_t), intent(in) :: options

!$omp master
         #:if ARRAY_IS_POINTER
            nullify (a)
         #:endif

         #:if not ARRAY_IS_STACK
            ! Allocate etc.
            allocate (a(n + options%offset))
         #:endif
!$omp end master

      end subroutine

      subroutine first_touch_parallel_${real}$ (n, a, v)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         real(${real}$), intent(inout) :: a(n)
         real(${real}$), intent(in) :: v

         integer(${OMB_INT_TYPE}$) :: i

!$omp do private(i) schedule(runtime)
         do i = 1, n
            a(i) = v
         end do
!$omp end do

      end subroutine

      subroutine first_touch_serial_${real}$ (n, a, v)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         real(${real}$), intent(inout) :: a(n)
         real(${real}$), intent(in) :: v

         integer(${OMB_INT_TYPE}$) :: i

!$omp master
         do i = 1, n
            a(i) = v
         end do
!$omp end master
!$omp barrier

      end subroutine

      subroutine init_array_${real}$ (n, a, v, options)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         real(${real}$), intent(inout) :: a(n)
         real(${real}$), intent(in) :: v
         type(options_t), intent(in):: options

         integer(${OMB_INT_TYPE}$) :: i
         real(${real}$) :: sum
         integer :: it

         if (options%first_touch) then
            call first_touch_parallel(n, a, v)
         else
            call first_touch_serial(n, a, v)
         end if

         do it = 1, options%warmup_it
            sum = 0._${real}$
            ! We can't do a reduction on the sum
            ! variable, since it is an orphaned
            ! method.
!$omp do private(i,sum) schedule(runtime)
            do i = 1, n
               sum = sum + a(i)
            end do
!$omp end do
         end do

      end subroutine

      ! Beginning of benchmark methods

      subroutine bench_sum_${real}$ (n, options, results)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer(${OMB_INT_TYPE}$) :: i
         integer :: it, team
         type(timing_t) :: timing

         real(${real}$) :: sum_a
         @:ARRAY_DEFINE(${real}$, n + options%offset, a)

!$omp parallel shared(n,a,options)
         call array_allocate(n, a, options)
         call init_array(n, a, 0.5_${real}$, options)
!$omp end parallel

         if (options%test) then
            write (*, test_fmt, advance="no") sum(a) - n*0.5_${real}$
         end if

         select type (kernel => options%kernel)

         type is (option_kernel_serial_t)

            do it = 1, options%it
               call timing%start()
               sum_a = 0._${real}$
               do i = 1, n
                  sum_a = sum_a + a(i)
               end do
               call timing%stop()
               results%times(it) = timing%time
            end do

         type is (option_kernel_teams_distribute_t)
!$omp teams private(it,i,team) shared(n,a,options,results) &
!$omp&  reduction(+:sum_a) &
!$omp&  num_teams(options%num_threads) thread_limit(1)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp distribute private(i)
               do i = 1, n
                  sum_a = sum_a + a(i)
               end do
!$omp end distribute

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         type is (option_kernel_teams_parallel_t)
!$omp teams private(it,i,team) shared(n,a,options,results) &
!$omp&  reduction(+:sum_a) &
!$omp&  num_teams(1) thread_limit(options%num_threads)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp parallel do schedule(runtime) private(i) shared(n,a)
               do i = 1, n
                  sum_a = sum_a + a(i)
               end do
!$omp end parallel do

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         class default

!$omp parallel private(it,i) shared(n,a,sum_a,options,results)

            do it = 1, options%it

               select type (kernel => options%kernel)

                  @:TYPE_IS(option_kernel_do_t)
!$omp do private(i) schedule(runtime) reduction(+:sum_a)
                  do i = 1, n
                     sum_a = sum_a + a(i)
                  end do
!$omp end do

                  @:TYPE_IS(option_kernel_workshare_t)
!$omp workshare
                  sum_a = sum(a)
!$omp end workshare

                  @:TYPE_IS(option_kernel_taskloop_t)
!$omp single
!$omp taskloop private(i) grainsize(kernel%grainsize) reduction(+:sum_a)
                  do i = 1, n
                     sum_a = sum_a + a(i)
                  end do
!$omp end taskloop
!$omp end single nowait

!$omp taskwait

                  @:TYPE_IS(option_kernel_loop_t)
!$omp loop private(i) reduction(+:sum_a)
                  do i = 1, n
                     sum_a = sum_a + a(i)
                  end do
!$omp end loop

               class default

                  stop 5

               end select

               @:STOP_TIMING(results%times(it))

            end do

!$omp end parallel

         end select

         call results%update(1, n, 1, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*0.5_${real}$
         end if

         @:ARRAY_DEALLOC(a)

      end subroutine

      subroutine bench_fill_${real}$ (n, options, results)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer(${OMB_INT_TYPE}$) :: i
         integer :: it, team
         type(timing_t) :: timing

         real(${real}$) :: fill
         @:ARRAY_DEFINE(${real}$, n + options%offset, a)

         fill = 2._${real}$

!$omp parallel shared(n,a,options)
         call array_allocate(n, a, options)
         call init_array(n, a, 0.5_${real}$, options)
!$omp end parallel

         if (options%test) then
            write (*, test_fmt, advance="no") sum(a) - n*0.5_${real}$
         end if

         select type (kernel => options%kernel)

         type is (option_kernel_serial_t)

            do it = 1, options%it
               call timing%start()
               do i = 1, n
                  a(i) = fill
               end do
               call timing%stop()
               results%times(it) = timing%time
            end do

         type is (option_kernel_teams_distribute_t)
!$omp teams private(it,i,team) shared(n,a,fill,options,results) &
!$omp&  num_teams(options%num_threads) thread_limit(1)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp distribute private(i)
               do i = 1, n
                  a(i) = fill
               end do
!$omp end distribute

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         type is (option_kernel_teams_parallel_t)
!$omp teams private(it,i,team) shared(n,a,fill,options,results) &
!$omp&  num_teams(1) thread_limit(options%num_threads)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp parallel do schedule(runtime) private(i) shared(n,a,fill)
               do i = 1, n
                  a(i) = fill
               end do
!$omp end parallel do

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         class default

!$omp parallel private(it,i) shared(n,a,fill,options,results)

            do it = 1, options%it

               select type (kernel => options%kernel)

                  @:TYPE_IS(option_kernel_do_t)
!$omp do private(i) schedule(runtime)
                  do i = 1, n
                     a(i) = fill
                  end do
!$omp end do

                  @:TYPE_IS(option_kernel_workshare_t)
!$omp workshare
                  a(:) = fill
!$omp end workshare

                  @:TYPE_IS(option_kernel_taskloop_t)
!$omp single
!$omp taskloop private(i) grainsize(kernel%grainsize)
                  do i = 1, n
                     a(i) = fill
                  end do
!$omp end taskloop
!$omp end single nowait

!$omp taskwait

                  @:TYPE_IS(option_kernel_loop_t)
!$omp loop private(i)
                  do i = 1, n
                     a(i) = fill
                  end do
!$omp end loop

               class default

                  stop 5

               end select

               @:STOP_TIMING(results%times(it))

            end do

!$omp end parallel

         end select

         call results%update(1, n, 0, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*fill
         end if

         @:ARRAY_DEALLOC(a)

      end subroutine

      subroutine bench_copy_${real}$ (n, options, results)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer(${OMB_INT_TYPE}$) :: i
         integer :: it, team
         type(timing_t) :: timing

         @:ARRAY_DEFINE(${real}$, n + options%offset, a, b)

!$omp parallel shared(n,a,b,options)
         call array_allocate(n, a, options)
         call array_allocate(n, b, options)
         call init_array(n, a, 0.5_${real}$, options)
         call init_array(n, b, 1.5_${real}$, options)
!$omp end parallel

         if (options%test) then
            write (*, test_fmt, advance="no") sum(a) - n*0.5_${real}$
         end if

         select type (kernel => options%kernel)

         type is (option_kernel_serial_t)

            do it = 1, options%it
               call timing%start()
               do i = 1, n
                  a(i) = b(i)
               end do
               call timing%stop()
               results%times(it) = timing%time
            end do

         type is (option_kernel_teams_distribute_t)
!$omp teams private(it,i,team) shared(n,a,b,options,results) &
!$omp&  num_teams(options%num_threads) thread_limit(1)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp distribute private(i)
               do i = 1, n
                  a(i) = b(i)
               end do
!$omp end distribute

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         type is (option_kernel_teams_parallel_t)
!$omp teams private(it,i,team) shared(n,a,b,options,results) &
!$omp&  num_teams(1) thread_limit(options%num_threads)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp parallel do schedule(runtime) private(i) shared(n,a,b)
               do i = 1, n
                  a(i) = b(i)
               end do
!$omp end parallel do

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         class default

!$omp parallel private(it,i) shared(n,a,b,options,results)

            do it = 1, options%it

               select type (kernel => options%kernel)

                  @:TYPE_IS(option_kernel_do_t)
!$omp do private(i) schedule(runtime)
                  do i = 1, n
                     a(i) = b(i)
                  end do
!$omp end do

                  @:TYPE_IS(option_kernel_workshare_t)
!$omp workshare
                  a(:) = b(:)
!$omp end workshare

                  @:TYPE_IS(option_kernel_taskloop_t)
!$omp single
!$omp taskloop private(i) grainsize(kernel%grainsize)
                  do i = 1, n
                     a(i) = b(i)
                  end do
!$omp end taskloop
!$omp end single nowait

!$omp taskwait

                  @:TYPE_IS(option_kernel_loop_t)
!$omp loop private(i)
                  do i = 1, n
                     a(i) = b(i)
                  end do
!$omp end loop

               class default

                  stop 5

               end select

               @:STOP_TIMING(results%times(it))

            end do

!$omp end parallel

         end select

         call results%update(2, n, 0, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*1.5_${real}$
         end if

         @:ARRAY_DEALLOC(a, b)

      end subroutine

      subroutine bench_scale_${real}$ (n, options, results)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer(${OMB_INT_TYPE}$) :: i
         integer :: it, team
         type(timing_t) :: timing

         real(${real}$) :: scale
         @:ARRAY_DEFINE(${real}$, n + options%offset, a, b)

         scale = 2._${real}$

!$omp parallel shared(n,a,b,options)
         call array_allocate(n, a, options)
         call array_allocate(n, b, options)
         call init_array(n, a, 0.5_${real}$, options)
         call init_array(n, b, 1.5_${real}$, options)
!$omp end parallel

         if (options%test) then
            write (*, test_fmt, advance="no") sum(a) - n*0.5_${real}$
         end if

         select type (kernel => options%kernel)

         type is (option_kernel_serial_t)

            do it = 1, options%it
               call timing%start()
               do i = 1, n
                  a(i) = scale*b(i)
               end do
               call timing%stop()
               results%times(it) = timing%time
            end do

         type is (option_kernel_teams_distribute_t)
!$omp teams private(it,i,team) shared(n,a,b,scale,options,results) &
!$omp&  num_teams(options%num_threads) thread_limit(1)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp distribute private(i)
               do i = 1, n
                  a(i) = scale*b(i)
               end do
!$omp end distribute

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         type is (option_kernel_teams_parallel_t)
!$omp teams private(it,i,team) shared(n,a,b,scale,options,results) &
!$omp&  num_teams(1) thread_limit(options%num_threads)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp parallel do schedule(runtime) private(i) shared(n,a,b,scale)
               do i = 1, n
                  a(i) = scale*b(i)
               end do
!$omp end parallel do

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         class default

!$omp parallel private(it,i) shared(n,a,b,scale,options,results)

            do it = 1, options%it

               select type (kernel => options%kernel)

                  @:TYPE_IS(option_kernel_do_t)
!$omp do private(i) schedule(runtime)
                  do i = 1, n
                     a(i) = scale*b(i)
                  end do
!$omp end do

                  @:TYPE_IS(option_kernel_workshare_t)
!$omp workshare
                  a(:) = scale*b(:)
!$omp end workshare

                  @:TYPE_IS(option_kernel_taskloop_t)
!$omp single
!$omp taskloop private(i) grainsize(kernel%grainsize)
                  do i = 1, n
                     a(i) = scale*b(i)
                  end do
!$omp end taskloop
!$omp end single nowait

!$omp taskwait

                  @:TYPE_IS(option_kernel_loop_t)
!$omp loop private(i)
                  do i = 1, n
                     a(i) = scale*b(i)
                  end do
!$omp end loop

               class default

                  stop 5

               end select

               @:STOP_TIMING(results%times(it))

            end do

!$omp end parallel

         end select

         call results%update(2, n, 1, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*scale*1.5_${real}$
         end if

         @:ARRAY_DEALLOC(a, b)

      end subroutine

      subroutine bench_add_${real}$ (n, options, results)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer(${OMB_INT_TYPE}$) :: i
         integer :: it, team
         type(timing_t) :: timing

         @:ARRAY_DEFINE(${real}$, n + options%offset, a, b, c)

!$omp parallel shared(n,a,b,c,options)
         call array_allocate(n, a, options)
         call array_allocate(n, b, options)
         call array_allocate(n, c, options)
         call init_array(n, a, 0.5_${real}$, options)
         call init_array(n, b, 1.5_${real}$, options)
         call init_array(n, c, 2.5_${real}$, options)
!$omp end parallel

         if (options%test) then
            write (*, test_fmt, advance="no") sum(a) - n*0.5_${real}$
         end if

         select type (kernel => options%kernel)

         type is (option_kernel_serial_t)

            do it = 1, options%it
               call timing%start()
               do i = 1, n
                  a(i) = b(i) + c(i)
               end do
               call timing%stop()
               results%times(it) = timing%time
            end do

         type is (option_kernel_teams_distribute_t)
!$omp teams private(it,i,team) shared(n,a,b,c,options,results) &
!$omp&  num_teams(options%num_threads) thread_limit(1)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp distribute private(i)
               do i = 1, n
                  a(i) = b(i) + c(i)
               end do
!$omp end distribute

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         type is (option_kernel_teams_parallel_t)
!$omp teams private(it,i,team) shared(n,a,b,c,options,results) &
!$omp&  num_teams(1) thread_limit(options%num_threads)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp parallel do schedule(runtime) private(i) shared(n,a,b,c)
               do i = 1, n
                  a(i) = b(i) + c(i)
               end do
!$omp end parallel do

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         class default

!$omp parallel private(it,i) shared(n,a,b,c,options,results)

            do it = 1, options%it

               select type (kernel => options%kernel)

                  @:TYPE_IS(option_kernel_do_t)
!$omp do private(i) schedule(runtime)
                  do i = 1, n
                     a(i) = b(i) + c(i)
                  end do
!$omp end do

                  @:TYPE_IS(option_kernel_workshare_t)
!$omp workshare
                  a(:) = b(:) + c(:)
!$omp end workshare

                  @:TYPE_IS(option_kernel_taskloop_t)
!$omp single
!$omp taskloop private(i) grainsize(kernel%grainsize)
                  do i = 1, n
                     a(i) = b(i) + c(i)
                  end do
!$omp end taskloop
!$omp end single nowait

!$omp taskwait

                  @:TYPE_IS(option_kernel_loop_t)
!$omp loop private(i)
                  do i = 1, n
                     a(i) = b(i) + c(i)
                  end do
!$omp end loop

               class default

                  stop 5

               end select

               @:STOP_TIMING(results%times(it))

            end do

!$omp end parallel

         end select

         call results%update(3, n, 1, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*(1.5_${real}$+2.5_${real}$)
         end if

         @:ARRAY_DEALLOC(a, b, c)

      end subroutine

      subroutine bench_triad_${real}$ (n, options, results)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer(${OMB_INT_TYPE}$) :: i
         integer :: it, team
         type(timing_t) :: timing

         real(${real}$) :: scale
         @:ARRAY_DEFINE(${real}$, n + options%offset, a, b, c)

         scale = 2._${real}$

!$omp parallel shared(n,a,b,c,options)
         call array_allocate(n, a, options)
         call array_allocate(n, b, options)
         call array_allocate(n, c, options)
         call init_array(n, a, 0.5_${real}$, options)
         call init_array(n, b, 1.5_${real}$, options)
         call init_array(n, c, 2.5_${real}$, options)
!$omp end parallel

         if (options%test) then
            write (*, test_fmt, advance="no") sum(a) - n*0.5_${real}$
         end if

         select type (kernel => options%kernel)

         type is (option_kernel_serial_t)

            do it = 1, options%it
               call timing%start()
               do i = 1, n
                  a(i) = b(i) + scale*c(i)
               end do
               call timing%stop()
               results%times(it) = timing%time
            end do

         type is (option_kernel_teams_distribute_t)
!$omp teams private(it,i,team) shared(n,a,b,c,scale,options,results) &
!$omp&  num_teams(options%num_threads) thread_limit(1)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp distribute private(i)
               do i = 1, n
                  a(i) = b(i) + scale*c(i)
               end do
!$omp end distribute

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         type is (option_kernel_teams_parallel_t)
!$omp teams private(it,i,team) shared(n,a,b,c,scale,options,results) &
!$omp&  num_teams(1) thread_limit(options%num_threads)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp parallel do schedule(runtime) private(i) shared(n,a,b,c,scale)
               do i = 1, n
                  a(i) = b(i) + scale*c(i)
               end do
!$omp end parallel do

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         class default

!$omp parallel private(it,i) shared(n,a,b,c,scale,options,results)

            do it = 1, options%it

               select type (kernel => options%kernel)

                  @:TYPE_IS(option_kernel_do_t)
!$omp do private(i) schedule(runtime)
                  do i = 1, n
                     a(i) = b(i) + scale*c(i)
                  end do
!$omp end do
                  @:TYPE_IS(option_kernel_workshare_t)
!$omp workshare
                  a(:) = b(:) + scale*c(:)
!$omp end workshare

                  @:TYPE_IS(option_kernel_taskloop_t)
!$omp single
!$omp taskloop private(i) grainsize(kernel%grainsize)
                  do i = 1, n
                     a(i) = b(i) + scale*c(i)
                  end do
!$omp end taskloop
!$omp end single nowait

!$omp taskwait

                  @:TYPE_IS(option_kernel_loop_t)
!$omp loop private(i)
                  do i = 1, n
                     a(i) = b(i) + scale*c(i)
                  end do
!$omp end loop

               class default

                  stop 5

               end select

               @:STOP_TIMING(results%times(it))

            end do

!$omp end parallel

         end select

         call results%update(3, n, 2, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*(1.5_${real}$+scale*2.5_${real}$)
         end if

         @:ARRAY_DEALLOC(a, b, c)

      end subroutine

      subroutine bench_axpy_${real}$ (n, options, results)
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer :: it, team
         type(timing_t) :: timing

         integer(${OMB_INT_TYPE}$) :: i
         real(${real}$) :: scale
         @:ARRAY_DEFINE(${real}$, n + options%offset, a, b)

         scale = 2._${real}$

!$omp parallel shared(n,a,b,options)
         call array_allocate(n, a, options)
         call array_allocate(n, b, options)
         call init_array(n, a, 0.5_${real}$, options)
         call init_array(n, b, 1.5_${real}$, options)
!$omp end parallel

         if (options%test) then
            write (*, test_fmt, advance="no") sum(a) - n*0.5_${real}$
         end if

         select type (kernel => options%kernel)

         type is (option_kernel_serial_t)

            do it = 1, options%it
               call timing%start()
               do i = 1, n
                  a(i) = a(i) + scale*b(i)
               end do
               call timing%stop()
               results%times(it) = timing%time
            end do

         type is (option_kernel_teams_distribute_t)
!$omp teams private(it,i,team) shared(n,a,b,scale,options,results) &
!$omp&  num_teams(options%num_threads) thread_limit(1)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp distribute private(i)
               do i = 1, n
                  a(i) = a(i) + scale*b(i)
               end do
!$omp end distribute

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         type is (option_kernel_teams_parallel_t)
!$omp teams private(it,i,team) shared(n,a,b,scale,options,results) &
!$omp&  num_teams(1) thread_limit(options%num_threads)

            team = omp_get_team_num()

            do it = 1, options%it

               @:START_TIMING(in_teams=1)

!$omp parallel do schedule(runtime) private(i) shared(n,a,b,scale)
               do i = 1, n
                  a(i) = a(i) + scale*b(i)
               end do
!$omp end parallel do

               @:STOP_TIMING(results%times(it), in_teams=1)

            end do

!$omp end teams

         class default

!$omp parallel private(it) shared(n,a,b,scale,options,results)

            do it = 1, options%it

               select type (kernel => options%kernel)

                  @:TYPE_IS(option_kernel_do_t)
!$omp do private(i) schedule(runtime)
                  do i = 1, n
                     a(i) = a(i) + scale*b(i)
                  end do
!$omp end do

                  @:TYPE_IS(option_kernel_workshare_t)
!$omp workshare
                  a(:) = a(:) + scale*b(:)
!$omp end workshare

                  @:TYPE_IS(option_kernel_taskloop_t)
!$omp single
!$omp taskloop private(i) grainsize(kernel%grainsize)
                  do i = 1, n
                     a(i) = a(i) + scale*b(i)
                  end do
!$omp end taskloop
!$omp end single nowait

!$omp taskwait

                  @:TYPE_IS(option_kernel_loop_t)
!$omp loop private(i)
                  do i = 1, n
                     a(i) = a(i) + scale*b(i)
                  end do
!$omp end loop

               class default

                  stop 5

               end select

               @:STOP_TIMING(results%times(it))

            end do

!$omp end parallel

         end select

         call results%update(2, n, 2, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*(0.5_${real}$+scale*1.5_${real}$)
         end if

         @:ARRAY_DEALLOC(a, b)

      end subroutine

      subroutine bench_triad_false_sharing_${real}$ (n, options, results)
         use omp_lib, only: omp_get_thread_num
         integer(${OMB_INT_TYPE}$), intent(in) :: n
         type(options_t), intent(in):: options
         type(results_t), intent(inout) :: results

         integer(${OMB_INT_TYPE}$) :: i
         integer :: id, it
         type(timing_t) :: timing

         real(${real}$) :: scale

         #:if ARRAY_IS_STACK
            real(${real}$), dimension(options%num_threads, n + options%offset) :: a, b, c
         #:else
            real(${real}$), dimension(:, :), ${OMB_ALLOC_TYPE}$ &
               ${OMB_ARRAY_ATTRIBUTES}$ :: a, b, c
         #:endif

         #:if ARRAY_IS_POINTER
            nullify (a, b, c)
         #:endif

         #:if not ARRAY_IS_STACK
            allocate (a(options%num_threads, n + options%offset))
            allocate (b(options%num_threads, n + options%offset))
            allocate (c(options%num_threads, n + options%offset))
         #:endif

         scale = 2._${real}$

!$omp parallel private(it,i,id) shared(n,a,b,scale,options,results)

         ! Direct call to omit interface constructs which has different shape
         call init_array_${real}$ (options%num_threads*n, a, 0.5_${real}$, options)
         call init_array_${real}$ (options%num_threads*n, b, 1.5_${real}$, options)
         call init_array_${real}$ (options%num_threads*n, c, 2.5_${real}$, options)

         ! Get local thread-id
         id = omp_get_thread_num() + 1

         do it = 1, options%it

            @:START_TIMING()

            ! To traverse everything, we don't need an OMP loop
            ! Each thread accesses its own space.
            do i = 1, n
               a(id, i) = b(id, i) + scale*c(id, i)
            end do

            ! there is no implicit barrier above
            !$omp barrier

            @:STOP_TIMING(results%times(it))

         end do

!$omp end parallel

         call results%update(3, options%num_threads*n, 2, storage_size(1.0_${real}$))

         if (options%test) then
            write (*, test_fmt) sum(a) - n*(1.5_${real}$+scale*2.5_${real}$)
         end if

         @:ARRAY_DEALLOC(a, b, c)

      end subroutine

   #:endfor

end module benchmarks_m
