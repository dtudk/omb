#:include "common.fypp"

module options_m

   use iso_fortran_env, only: int32, int64

   implicit none

   ! Specifics for handling options for the algorithms.
   ! For instance, it can hold first-touch, whether warm-up
   ! number of iterations, etc.
   private
   type, public :: options_t

      !< Number of iterations that are timed
      integer :: it = 10
      !< Number of iterations that are *not* timed
      integer :: warmup_it = 1
      !< Whether the arrays are using a parallel first-touch, otherwise serial
      logical :: first_touch = .true.
      !< Offset in allocation, just to ensure non-contiguity of array-allocations
      integer(${OMB_INT_KIND}$) :: offset = 0
      !< Number of threads maximal available. Mainly used for special benchmarks
      integer :: num_threads = 1

      !< Whether we should print-out debug info
      logical :: debug = .false.

      !< Whether we should print-out test info
      logical :: test = .false.

      !< The kernel specification for the test runned.
      class(option_kernel_t), pointer :: kernel => null()

   end type

   !< Inheritable class to signal which kernel we will be using
   type, public :: option_kernel_t
   contains

      procedure, pass :: name => option_kernel_name

   end type

   !< Use no OpenMP clauses.
   type, public, extends(option_kernel_t) :: option_kernel_serial_t
   end type

   !< Use the parallel construct, then manual static splitting.
   type, public, extends(option_kernel_t) :: option_kernel_manual_t
   end type

   !< Use the parallel do construct.
   type, public, extends(option_kernel_t) :: option_kernel_do_t
   end type

   !< Use the parallel do simd construct.
   type, public, extends(option_kernel_t) :: option_kernel_do_simd_t
   end type

   !< Use the parallel workshare construct.
   type, public, extends(option_kernel_t) :: option_kernel_workshare_t
   end type

   !< Use the parallel taskloop construct.
   !<
   !< The taskloop construct adds an implicit taskgroup around.
   !< We default to use this because it is required for reduction
   !< operations.
   type, public, extends(option_kernel_t) :: option_kernel_taskloop_t
      integer(${OMB_INT_KIND}$) :: num_tasks = -1
   end type

   !< Use the parallel loop construct.
   type, public, extends(option_kernel_t) :: option_kernel_loop_t
   end type

   !< Use the teams construct and the initial team thread for parallelism.
   !<
   !< This is somewhat equivalent to the distribute. However,
   !< it uses a manual segmentation of the loops.
   !< So the thread_limit is hardcoded to 1, and the num_teams is specified
   !< to be `num_threads`.
   !< Kind of abusing the teams constructs.
   type, public, extends(option_kernel_t) :: option_kernel_teams_manual_t
   end type

   !< Use the teams distribute construct.
   !<
   !< This uses the distribute to utilize only the master threads
   !< of each team to perform the computation.
   !< So the thread_limit is hardcoded to 1, and the num_teams is specified
   !< to be `num_threads`.
   !< Kind of abusing the teams + distribute constructs.
   type, public, extends(option_kernel_t) :: option_kernel_teams_distribute_t
   end type

   !< Use the teams parallel do construct.
   !<
   !< This uses the teams (force-fully sets num_team=1) and then uses
   !< the threads to a worksharing clause using `parallel do`.
   !< Kind of abusing the teams construct.
   type, public, extends(option_kernel_t) :: option_kernel_teams_parallel_t
   end type

contains

   subroutine option_kernel_name(this, name)
      class(option_kernel_t), intent(in) :: this
      character(len=*), intent(out) :: name

      name = " "

      select type (this)
      type is (option_kernel_serial_t)
         name = "serial"
      type is (option_kernel_manual_t)
         name = "manual"
      type is (option_kernel_do_t)
         name = "do"
      type is (option_kernel_do_simd_t)
         name = "do:simd"
      type is (option_kernel_workshare_t)
         name = "workshare"
      type is (option_kernel_taskloop_t)
         name = "taskloop"
      type is (option_kernel_loop_t)
         name = "loop"
      type is (option_kernel_teams_manual_t)
         name = "teams:manual"
      type is (option_kernel_teams_distribute_t)
         name = "teams:distribute"
      type is (option_kernel_teams_parallel_t)
         name = "teams:parallel"
      class default
         name = "<unset>"
      end select

   end subroutine

end module
