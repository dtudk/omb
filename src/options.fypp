#:include "common.fypp"

module options_m

   use iso_fortran_env, only: int32, int64

   implicit none

   ! Specifics for handling options for the algorithms.
   ! For instance, it can hold first-touch, whether warm-up
   ! number of iterations, etc.
   private

   type, public :: option_kernel_t
   end type

   type, public, extends(option_kernel_t) :: option_kernel_do_t
   end type

   type, public, extends(option_kernel_t) :: option_kernel_workshare_t
   end type

   type, public, extends(option_kernel_t) :: option_kernel_taskloop_t
      integer(${OMB_INT_TYPE}$) :: grainsize = 1
   end type

   type, public :: options_t

      !< Number of iterations that are timed
      integer :: it = 20
      !< Number of iterations that are *not* timed
      integer :: warmup_it = 1
      !< Whether the arrays are using a distributed first-touch
      logical :: first_touch = .true.
      !< Offset in allocation, just to ensure non-contiguity of array-allocations
      integer :: offset = 0
      !< Number of threads maximal available. Mainly used for special benchmarks
      integer :: num_threads
      class(option_kernel_t), pointer :: kernel => null()

   end type

end module
