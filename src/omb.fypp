#:include "common.fypp"

program main

   ! Benchmark tests for OpenMP threads.
   ! This small utility program allows one to
   ! benchmark how read/write/read+write access
   ! in done with OpenMP.
   #:if defined('OMB_MPI')
      use mpi_f08
   #:endif
   use omp_lib
   use iso_fortran_env, only: OUTPUT_UNIT, ERROR_UNIT
   use iso_fortran_env, only: real32, real64, real128
   use iso_fortran_env, only: int32, int64

   ! This is a pure fortran code, but should be able
   ! to give same results for C/C++.
   ! Generally, the OpenMP implementation is a bit
   ! behind for fortran compilers.
   use timing_m, only: timing_initialize, timing_get_sys_rate
   use timing_m, only: timing_get_sys_max
   use options_m
   use results_m, only: results_t
   use benchmarks_m ! ALL

   implicit none

   character(len=*), parameter :: debug_fmt_a = "(a,t35,':',256(tr1,a))"
   character(len=*), parameter :: debug_fmt_i = "(a,t35,':',256(tr1,i0))"
   character(len=*), parameter :: debug_fmt_l = "(a,t35,':',256(tr1,l0))"
   character(len=*), parameter :: debug_fmt_e = "(a,t35,':',256(tr1,e0.10))"
   ! narrays highly linked to default method
   integer :: narrays = 3
   integer :: method = METHOD_TRIAD

   integer, parameter :: DTYPE_REAL32 = 0
   integer, parameter :: DTYPE_REAL64 = 1
   integer, parameter :: DTYPE_REAL128 = 2
   integer :: dtype = DTYPE_REAL64

   procedure(benchmark_method), pointer :: benchmark => null()

   ! Method definitions
   character(len=64) :: method_str
   character(len=1) :: dtype_str
   integer :: elem_size
   integer(int64) :: big_n
   integer(${OMB_SIZE_TYPE}$) :: n, n_dim2
   integer :: chunk_size

   ! We need to at least have each array size on the order of 4 times the cache size
   ! to move the entire array out and ensure no caching is there...
   ! So, lets just take 512MB for safety.
   ! This means that the total memory is 512MB of memory
   real(real64), parameter :: bytes2kB = 1._real64/1024
   real(real64), parameter :: bytes2MB = 1._real64/1024**2
   real(real64) :: bytes = 512._real64*1024**2
   type(options_t) :: options
   type(results_t) :: results

   logical :: debug = .false.
   logical :: info_env = .false.

   logical :: option_set_it = .false.

   integer :: rank_mpi = 0
   #:if defined('OMB_MPI')
      integer :: ierr_mpi
      integer :: size_mpi
   #:endif

   #:if defined('OMB_MPI')
      call MPI_Init(ierr_mpi)

      ! Get rank and size
      call MPI_Comm_rank(MPI_COMM_WORLD, rank_mpi)
      call MPI_Comm_size(MPI_COMM_WORLD, size_mpi)
   #:endif

   ! Extract the chunk-size, mainly useful for the taskloop
   ! method which uses *grainsize* and that is not controllable
   ! by the env-var.
   block
      integer(OMP_SCHED_KIND) :: sched
      call omp_get_schedule(sched, chunk_size)
   end block

   ! Initialize the timing
   call timing_initialize()

   block
      integer :: nargs
      integer :: iarg
      integer :: len_arg
      character(len=256) :: arg
      integer :: idx, istr_size
      character(len=2), parameter :: STR_SIZES(6) = ["kb", "k ", "mb", "m ", "gb", "g "]
      integer, parameter :: INT_SIZES(6) = [1024, 1024, 1024**2, 1024**2, 1024**3, 1024**3]

      nargs = command_argument_count()
      iarg = 1
      do while (iarg <= nargs)

         ! Get current argument
         call read_and_check_next_arg(iarg, arg)

         select case (arg)
         case ("-debug", "--debug")
            debug = .true.

         case ("-env", "--env")
            info_env = .true.

         case ("-kernel", "--kernel")

            if (iarg >= nargs) then
               write (ERROR_UNIT, *) "Too few arguments, -kernel has no argument"
               stop 3
            end if

            ! Read next arg
            iarg = iarg + 1
            call read_and_check_next_arg(iarg, arg)

            if (associated(options%kernel)) then
               deallocate (options%kernel)
            end if

            select case (arg)
            case ("do")
               allocate (option_kernel_do_t::options%kernel)
            case ("workshare")
               allocate (option_kernel_workshare_t::options%kernel)
            case ("taskloop")
               allocate (option_kernel_taskloop_t::options%kernel)
            end select

            select type (kernel => options%kernel)
            type is (option_kernel_taskloop_t)
               kernel%grainsize = max(1, chunk_size)
            end select

         case ("fill")
            method = METHOD_FILL
            narrays = 1

         case ("sum")
            method = METHOD_SUM
            narrays = 1

         case ("add")
            method = METHOD_ADD
            narrays = 3

         case ("copy")
            method = METHOD_COPY
            narrays = 2

         case ("scale")
            method = METHOD_SCALE
            narrays = 2

         case ("triad", "triadd")
            method = METHOD_TRIAD
            narrays = 3

         case ("axpy")
            method = METHOD_AXPY
            narrays = 2

         case ("daxpy")
            dtype = DTYPE_REAL64
            method = METHOD_AXPY
            narrays = 2

         case ("saxpy")
            dtype = DTYPE_REAL32
            method = METHOD_AXPY
            narrays = 2

         case ("fs-triad", "false-sharing-triad")
            method = METHOD_FALSE_SHARING_TRIAD
            narrays = 3

         case ("-dtype", "--dtype")

            if (iarg >= nargs) then
               write (ERROR_UNIT, *) "Too few arguments, -dtype has no argument"
               stop 3
            end if

            ! Read next arg
            iarg = iarg + 1
            call read_and_check_next_arg(iarg, arg)

            select case (arg)
            case ("real32", "32", "float")
               dtype = DTYPE_REAL32

            case ("real64", "64", "double")
               dtype = DTYPE_REAL64

            case ("real128", "128", "doubledouble", "longdouble")
               dtype = DTYPE_REAL128

            case default
               write (ERROR_UNIT, *) "-dtype argument is not one of [real32/32, real64/64, real128/128]"
               stop 3

            end select

         case ("-first-touch", "--first-touch", "-ft")
            options%first_touch = .true.

         case ("-no-first-touch", "--no-first-touch", "-nft")
            options%first_touch = .false.

         case ("-warmup", "--warmup")

            if (iarg >= nargs) then
               write (ERROR_UNIT, *) "Too few arguments, --warmup has no argument"
               stop 3
            end if

            ! Read next arg
            iarg = iarg + 1
            call read_and_check_next_arg(iarg, arg)

            read (arg, *) options%warmup_it

         case ("-it", "--it", "--itt", "-itt") ! last two are legacy options

            if (iarg >= nargs) then
               write (ERROR_UNIT, *) "Too few arguments, --it has no argument"
               stop 3
            end if

            option_set_it = .true.
            ! Read next arg
            iarg = iarg + 1
            call read_and_check_next_arg(iarg, arg)

            read (arg, *) options%it

         case ("-n", "--n")

            if (iarg >= nargs) then
               write (ERROR_UNIT, *) "Too few arguments, -n has no argument"
               stop 3
            end if

            ! Read next arg
            iarg = iarg + 1
            call read_and_check_next_arg(iarg, arg)
            ! Lower-case it (so kb == KB == kB).
            arg = lcase(trim(arg))

            n = 0
            ! We need to check if kb/kB/k, mb/MB/m, gb/GB/g is in the arg
            do istr_size = 1, size(STR_SIZES)
               idx = index(trim(arg), trim(STR_SIZES(istr_size)))
               if (idx > 0) then
                  if (debug) then
                     write (OUTPUT_UNIT, *) "Converting", trim(arg)
                     write (OUTPUT_UNIT, *) "To unit = ", trim(STR_SIZES(istr_size))
                  end if

                  arg(idx:idx + 1) = " "
                  read (arg, *) bytes
                  ! this converts 10MB to
                  ! 10 * 1024**2
                  bytes = bytes*INT_SIZES(istr_size)
                  n = 1
                  exit
               end if
            end do

            if (n == 0) then
               write (ERROR_UNIT, *) "Could not interpret your -n argument: ", trim(arg)
               stop 4
            end if

         case ("help", "--help", "-help", "-h")

            call print_help()
            stop 0

         case default

            write (ERROR_UNIT, *) "Unknown argument: ", trim(arg)
            call print_help()
            stop 1

         end select

         iarg = iarg + 1
      end do

   end block

   block

      ! Correct OpenMP defaults
      character(len=256) :: arg
      integer :: i

      call get_environment_variable("OMP_SCHEDULE", arg, i)
      if (i <= 0) then
         ! schedule not set, do not rely on the implementation specific
         ! set it to static
         call omp_set_schedule(OMP_SCHED_STATIC, 0)
      end if

   end block

   if (.not. associated(options%kernel)) then
      ! default to the DO kernel
      allocate (option_kernel_do_t::options%kernel)
   end if

   #:if defined('OMB_MPI')
      if (rank_mpi > 0) then
         debug = .false.
      end if
   #:endif

   ! Generally, we will only use a single 2nd dimension.
   ! Only for false-sharing do we need a 2nd dimension.
   n_dim2 = 1

   ! At this point, `bytes` is some size in bytes
   ! Lets convert this to the number of elements for the given dtype
   select case (dtype)
   case (DTYPE_REAL32)
      dtype_str = "f"
      elem_size = storage_size(1._real32)
      if (debug) write (OUTPUT_UNIT, debug_fmt_a) "dtype", "real32"
   case (DTYPE_REAL64)
      dtype_str = "d"
      elem_size = storage_size(1._real64)
      if (debug) write (OUTPUT_UNIT, debug_fmt_a) "dtype", "real64"
   case (DTYPE_REAL128)
      dtype_str = "q"
      elem_size = storage_size(1._real128)
      if (debug) write (OUTPUT_UNIT, debug_fmt_a) "dtype", "real128"
   end select
   if (debug) then
      write (OUTPUT_UNIT, debug_fmt_i) "dtype_size [bits]", elem_size
      write (OUTPUT_UNIT, debug_fmt_i) "target_bytes [B]", nint(bytes, int64)
   end if

   ! Store in safety variable
   ! This will be the number of elements *per array*
   big_n = nint(bytes*8/(elem_size*narrays), int64)
   if (big_n > huge(n)) then
      write (ERROR_UNIT, *) "Cannot store the array size in the variable, must use int64!"
      stop 20
   end if
   n = big_n

   #:def CASE_DTYPE_BENCHMARK(name)
      select case (dtype)
         #:for real in REALS
            case (DTYPE_${real.upper()}$)
            benchmark => ${name}$_${real}$
         #:endfor
      end select
   #:enddef CASE_DTYPE_BENCHMARK

   select case (method)
   case (METHOD_NOT_SET)
      write (ERROR_UNIT, *) "No method defined, cannot run benchmark!"
      stop 10

   case (METHOD_ADD)
      method_str = "add"

      @:CASE_DTYPE_BENCHMARK(bench_add)

   case (METHOD_SCALE)
      method_str = "scale"

      @:CASE_DTYPE_BENCHMARK(bench_scale)

   case (METHOD_COPY)
      method_str = "copy"

      @:CASE_DTYPE_BENCHMARK(bench_copy)

   case (METHOD_TRIAD)
      method_str = "triad"

      @:CASE_DTYPE_BENCHMARK(bench_triad)

   case (METHOD_SUM)
      method_str = "sum"

      @:CASE_DTYPE_BENCHMARK(bench_sum)

   case (METHOD_AXPY)
      method_str = "axpy"

      @:CASE_DTYPE_BENCHMARK(bench_axpy)

   case (METHOD_FILL)
      method_str = "fill"

      @:CASE_DTYPE_BENCHMARK(bench_fill)

   case (METHOD_FALSE_SHARING_TRIAD)
      method_str = "falsesharing"

      ! Correct n, so we have this per-thread
!$omp parallel shared(n_dim2)
!$omp single
      n_dim2 = omp_get_num_threads()
!$omp end single
!$omp end parallel

      @:CASE_DTYPE_BENCHMARK(bench_false_sharing_triad)

   end select

   ! Reduce n since the method multiplies by nthreads
   if (n_dim2 > 1) then
      n = max(1, nint(real(n, real64)/n_dim2))
      big_n = n*n_dim2
   end if

   ! Adjust number of iterations based on the byte size.
   ! For very small arrays, we should do more iterations to correctly
   bytes = real(big_n, real64)*elem_size*narrays/8
   ! time the small memories.
   if ((.not. option_set_it) .and. bytes*bytes2MB < 1._real64) then
      ! bump it up to 1000 iterations
      options%it = 1000
   end if

   ! At this point we should have:
   ! big_n == total number of elements *per array*
   ! n == elements along the distributed array dimension (<= big_n)

   if (debug) then
      write (OUTPUT_UNIT, debug_fmt_a, advance="no") "kernel"
      select type (kernel => options%kernel)
      type is (option_kernel_do_t)
         write (OUTPUT_UNIT, "(a)") "do"
      type is (option_kernel_workshare_t)
         write (OUTPUT_UNIT, "(a)") "workshare"
      type is (option_kernel_taskloop_t)
         write (OUTPUT_UNIT, "(a)") "taskloop"
      end select
      ! Important to use big_n
      write (OUTPUT_UNIT, debug_fmt_i) "elem_count", big_n
      write (OUTPUT_UNIT, debug_fmt_e) "alloc_mem [MB]", real(big_n, real64)*elem_size*narrays/(8*1024**2)
      write (OUTPUT_UNIT, debug_fmt_l) "first_touch", options%first_touch
      write (OUTPUT_UNIT, debug_fmt_i) "warmup_it", options%warmup_it
      write (OUTPUT_UNIT, debug_fmt_i) "it", options%it
   end if

   ! OpenMP information
   if (info_env) then
      #:if defined('OMB_MPI')
         call show_info_mpi()
      #:else
         call show_info_omp()
      #:endif
   end if

   ! Allocate the timings
   call results%allocate(options%it)

   call benchmark(n, options, results)

   ! Reduce the results

   #:if defined('OMB_MPI')

      if (size_mpi > 1) then
         ! Only reduce, if we have more than 1 processor
         call results%reduce_mpi(results)
      end if

   #:endif

   if (rank_mpi == 0 .and. .not. info_env) then

      write (OUTPUT_UNIT, "(tr1,a)", advance="no") trim(dtype_str)
      write (OUTPUT_UNIT, "(tr1,a)", advance="no") trim(method_str)
      select type (kernel => options%kernel)
      type is (option_kernel_do_t)
         write (OUTPUT_UNIT, "(tr1,a)", advance="no") "do"
      type is (option_kernel_workshare_t)
         write (OUTPUT_UNIT, "(tr1,a)", advance="no") "workshare"
      type is (option_kernel_taskloop_t)
         write (OUTPUT_UNIT, "(tr1,a)", advance="no") "taskloop"
      class default
         write (ERROR_UNIT, *) "Unknown kernel specification"
         stop 5
      end select
      write (OUTPUT_UNIT, "(tr1,es16.8)", advance="no") results%mem_mb
      write (OUTPUT_UNIT, "(tr1,es16.8)", advance="no") results%time_min()
      write (OUTPUT_UNIT, "(tr1,es16.8)", advance="no") results%time_avg()
      write (OUTPUT_UNIT, "(tr1,es16.8)", advance="no") results%time_std()
      write (OUTPUT_UNIT, "(tr1,es16.8)", advance="no") results%time_max()
      write (OUTPUT_UNIT, "(tr1,en16.8)", advance="no") results%bandwidth_gbs()
      write (OUTPUT_UNIT, "(tr1,en16.8)", advance="no") results%gflops()
      write (OUTPUT_UNIT, *) ""

      flush OUTPUT_UNIT

   end if

   #:if defined('OMB_MPI')
      call MPI_Finalize(ierr_mpi)
   #:endif

contains

   subroutine read_and_check_next_arg(iarg, arg)
      integer, intent(in) :: iarg
      character(len=*), intent(inout) :: arg
      integer :: len_arg

      arg = " "
      call get_command_argument(iarg, arg, length=len_arg)

      if (len_arg > len(arg)) then
         write (ERROR_UNIT, "(a,tr1,i0,tr1,a)") "Argument", iarg, "is too long! (>256)"
         stop 2
      end if

   end subroutine

   #:if defined('OMB_MPI')
      subroutine show_info_mpi()

         character(len=*), parameter :: mpi_fmt_i = "('mpi ',a,t35,':',256(tr1,i0))"

         ! This basically loops show_info_omp for each rank
         integer :: rank

         do rank = 0, size_mpi - 1
            flush OUTPUT_UNIT

            if (rank == rank_mpi) then
               if (rank == 0) then
                  write (OUTPUT_UNIT, mpi_fmt_i) "comm_size", size_mpi
               end if
               write (OUTPUT_UNIT, mpi_fmt_i, advance="no") "comm_rank", rank_mpi
               call show_info_omp()
               write (OUTPUT_UNIT, *) ! empty line
               flush OUTPUT_UNIT
            end if

            call MPI_Barrier(MPI_COMM_WORLD)

            flush OUTPUT_UNIT

         end do

      end subroutine
   #:endif

   subroutine show_info_omp()

      ! If you ever have more places than 256 (threads etc.)
      ! then bump up the values below
      character(len=*), parameter :: sys_fmt_i = "('sys ',a,t35,':',256(tr1,i0))"
      character(len=*), parameter :: omp_fmt_i = "('omp ',a,t35,':',256(tr1,i0))"
      character(len=*), parameter :: omp_fmt_da = "('omp ',a,t35,':',tr1,f0.10,tr1,a)"
      character(len=*), parameter :: omp_fmt_l = "('omp ',a,t35,':',256(tr1,l0))"
      character(len=*), parameter :: omp_fmt_a = "('omp ',a,t35,':',256(tr1,a))"
      character(len=*), parameter :: omp_fmt_p_i = "('omp ',a,t28,'[',i0,']',t35,':',256(tr1,i0))"
      character(len=*), parameter :: omp_fmt_p_ids = "('omp ',a,t28,'[',i0,']',t35,':',tr1,256(i0,:,','))"
      character(len=*), parameter :: omp_fmt_t_i = "('omp ','[',i0,']',tr1,a,t35,':',256(tr1,i0))"
      character(len=*), parameter :: omp_fmt_t_ids = "('omp ','[',i0,']',tr1,a,t35,':',tr1,256(i0,:,','))"
      character(len=*), parameter :: omp_fmt_t_a = "('omp ','[',i0,']',tr1,a,t35,':',256(tr1,a))"
      character(len=2048) :: affinity_fmt, string
      integer :: i, n, idx, chunk
      integer :: thread, io_thread
      integer :: proc_ids(2048)
      integer(OMP_SCHED_KIND) :: sched
      integer(OMP_PROC_BIND_KIND) :: proc_bind

      ! It is only defined outside of parallel regions
      ! Inside parallel regions, it is implementation specific
      string = " "
      affinity_fmt = " "
      i = omp_get_affinity_format(affinity_fmt)
      if (i > len(affinity_fmt)) then
         write (ERROR_UNIT, '(a,tr1,i0,tr1,a)') "Affinity format size is not big enough", i
         stop 101
      end if

      write (OUTPUT_UNIT, *) ! newline

!$omp parallel default(private) shared(affinity_fmt)

      ! Generic OMP information

!$omp single

      ! Currently there is a bug in GCC that won't allow a single construct
      ! to start with a `block`. So we purposefully put the sys-printouts here
      ! But in reality I would have liked them outside the parallel construct.

      ! Generic system information
      write (OUTPUT_UNIT, sys_fmt_i) "system_clock_rate", timing_get_sys_rate()
      write (OUTPUT_UNIT, sys_fmt_i) "system_clock_max", timing_get_sys_max()

      ! Get information on the tick precision.
      block
         real(real64) :: wtick
         wtick = omp_get_wtick()
         if (wtick < 1e-9_real64) then
            write (OUTPUT_UNIT, omp_fmt_da) "wtick", wtick*1e12, "ps"
         else if (wtick < 1e-6_real64) then
            write (OUTPUT_UNIT, omp_fmt_da) "wtick", wtick*1e9, "ns"
         else if (wtick < 1e-3_real64) then
            write (OUTPUT_UNIT, omp_fmt_da) "wtick", wtick*1e6, "us"
         else
            write (OUTPUT_UNIT, omp_fmt_da) "wtick", wtick*1e3, "ms"
         end if
      end block

      write (OUTPUT_UNIT, omp_fmt_i) "max_threads", omp_get_max_threads()
      write (OUTPUT_UNIT, omp_fmt_i) "num_threads", omp_get_num_threads()
      write (OUTPUT_UNIT, omp_fmt_i) "num_procs", omp_get_num_procs()
      write (OUTPUT_UNIT, omp_fmt_i) "thread_limit", omp_get_thread_limit()

      call get_environment_variable("OMP_SCHEDULE", string, i)
      write (OUTPUT_UNIT, omp_fmt_a) "OMP_SCHEDULE", trim(adjustl(string))
      call get_environment_variable("OMP_STACKSIZE", string, i)
      write (OUTPUT_UNIT, omp_fmt_a) "OMP_STACKSIZE", trim(adjustl(string))
      call get_environment_variable("OMP_WAIT_POLICY", string, i)
      write (OUTPUT_UNIT, omp_fmt_a) "OMP_WAIT_POLICY", trim(adjustl(string))
      call get_environment_variable("OMP_NESTED", string, i)
      write (OUTPUT_UNIT, omp_fmt_a) "OMP_NESTED", trim(adjustl(string))
      call get_environment_variable("OMP_TARGET_OFFLOAD", string, i)
      write (OUTPUT_UNIT, omp_fmt_a) "OMP_TARGET_OFFLOAD", trim(adjustl(string))
      call get_environment_variable("OMP_TOOL", string, i)
      write (OUTPUT_UNIT, omp_fmt_a) "OMP_TOOL", trim(adjustl(string))
      call get_environment_variable("OMP_ALLOCATOR", string, i)
      write (OUTPUT_UNIT, omp_fmt_a) "OMP_ALLOCATOR", trim(adjustl(string))

      write (OUTPUT_UNIT, omp_fmt_a) "affinity_format", trim(adjustl(affinity_fmt))

      i = omp_capture_affinity(string, "%H")
      write (OUTPUT_UNIT, omp_fmt_a) "host", trim(adjustl(string))

      i = omp_capture_affinity(string, "%P")
      write (OUTPUT_UNIT, omp_fmt_a) "process_id", trim(adjustl(string))

      call omp_get_schedule(sched, chunk)
      select case (sched)
      case (OMP_SCHED_STATIC)
         write (OUTPUT_UNIT, omp_fmt_a) "schedule", "static"
      case (OMP_SCHED_DYNAMIC)
         write (OUTPUT_UNIT, omp_fmt_a) "schedule", "dynamic"
      case (OMP_SCHED_GUIDED)
         write (OUTPUT_UNIT, omp_fmt_a) "schedule", "guided"
      case (OMP_SCHED_AUTO)
         write (OUTPUT_UNIT, omp_fmt_a) "schedule", "auto"
         !case ( OMP_SCHED_MONOTONIC )
         !   write(OUTPUT_UNIT,omp_fmt_a) "omp schedule", "monotonic"
      case default
         write (OUTPUT_UNIT, omp_fmt_i) "schedule", sched
      end select
      write (OUTPUT_UNIT, omp_fmt_i) "schedule_chunk", chunk

      if (omp_get_dynamic()) then
         write (OUTPUT_UNIT, omp_fmt_a) "dynamic", "true"
      else
         write (OUTPUT_UNIT, omp_fmt_a) "dynamic", "false"
      end if

      proc_bind = omp_get_proc_bind()
      select case (proc_bind)
      case (OMP_PROC_BIND_FALSE)
         write (OUTPUT_UNIT, omp_fmt_a) "proc_bind", "false"
      case (OMP_PROC_BIND_TRUE)
         write (OUTPUT_UNIT, omp_fmt_a) "proc_bind", "true"
      case (OMP_PROC_BIND_MASTER)
         write (OUTPUT_UNIT, omp_fmt_a) "proc_bind", "master"
      case (OMP_PROC_BIND_CLOSE)
         write (OUTPUT_UNIT, omp_fmt_a) "proc_bind", "close"
      case (OMP_PROC_BIND_SPREAD)
         write (OUTPUT_UNIT, omp_fmt_a) "proc_bind", "spread"
      case default
         write (OUTPUT_UNIT, omp_fmt_i) "proc_bind", proc_bind
      end select

      #:if OMB_OMP_DEVICE > 0
         write (OUTPUT_UNIT, omp_fmt_i) "num_devices", omp_get_num_devices()
         write (OUTPUT_UNIT, omp_fmt_i) "default_device", omp_get_default_device()
         write (OUTPUT_UNIT, omp_fmt_i) "device_num", omp_get_device_num()
      #:endif

      #:if OMB_OMP_TEAMS > 0
         write (OUTPUT_UNIT, omp_fmt_i) "num_teams", omp_get_num_teams()
         write (OUTPUT_UNIT, omp_fmt_i) "team_num", omp_get_team_num()
      #:endif

      write (OUTPUT_UNIT, omp_fmt_i) "num_places", omp_get_num_places()
      do i = 0, omp_get_num_places() - 1

         n = omp_get_place_num_procs(i)
         write (OUTPUT_UNIT, omp_fmt_p_i) "place_num_procs", i, n
         call omp_get_place_proc_ids(i, proc_ids)
         write (OUTPUT_UNIT, omp_fmt_p_ids) "place_proc_ids", i, proc_ids(1:n)

      end do

      write (OUTPUT_UNIT, *) ! newline

      flush OUTPUT_UNIT
!$omp end single
      flush OUTPUT_UNIT

      ! Thread information

      thread = omp_get_thread_num()
      do io_thread = 0, omp_get_max_threads() - 1
         if (io_thread == thread) then

            i = omp_capture_affinity(string, "%i | %P")
            write (OUTPUT_UNIT, omp_fmt_t_a) thread, "thread_id | process_id", trim(adjustl(string))

            #:if OMB_OMP_PARTITION > 0
               n = omp_get_partition_num_places()
               write (OUTPUT_UNIT, omp_fmt_t_i) thread, "partition_num_places", n

               call omp_get_partition_place_nums(proc_ids)
               write (OUTPUT_UNIT, omp_fmt_t_ids) thread, "partition_place_nums", proc_ids(1:n)
            #:endif

            i = omp_get_place_num()
            n = omp_get_place_num_procs(i)
            write (OUTPUT_UNIT, omp_fmt_t_i) thread, "place_num_procs", n
            call omp_get_place_proc_ids(i, proc_ids)
            write (OUTPUT_UNIT, omp_fmt_t_ids) thread, "place_proc_ids", proc_ids(1:n)

         end if
!$omp barrier
         flush OUTPUT_UNIT
      end do

!$omp end parallel

   end subroutine

   pure function lcase(str)
      character(len=*), intent(in) :: str
      character(len=len(str)) :: lcase
      character(len=*), parameter :: upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
      character(len=*), parameter :: lower = 'abcdefghijklmnopqrstuvwxyz'

      integer :: ic, i

      ! Capitalize each letter if it is lowercase
      lcase = str
      i = scan(lcase, upper)
      do while (i > 0)
         ! Get the conversion index
         ic = index(upper, lcase(i:i))
         lcase(i:i) = lower(ic:ic)
         ic = scan(lcase(i + 1:), upper)
         if (ic > 0) then
            i = i + ic
         else
            i = 0
         end if
      end do

   end function lcase

   subroutine print_help()

      character(len=256) :: arg
      integer :: len_arg

      character(len=*), parameter :: fmt_opt_a = "(t5,'--',a,t25,': ',a)"
      character(len=*), parameter :: fmt_oa = "(t25,'  ',a)"
      character(len=*), parameter :: fmt_arg_a = "(t5,'  ',a,t20,': ',a)"
      character(len=*), parameter :: fmt_aa = "(t25,'  ',a)"
      character(len=*), parameter :: fmt_nl = "(a)"

      ! Get executable name
      call get_command_argument(0, arg, length=len_arg)
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, '(2a)') "OpenMP benchmark program: ", trim(arg)
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, '(a)') "STREAM like OpenMP benchmark program with more option."
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, '(a)') "Options:"
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_opt_a) "debug", "print-out additional debug information"

      write (OUTPUT_UNIT, fmt_opt_a) "env", "print-out OpenMP environment understanding"
      write (OUTPUT_UNIT, fmt_oa) "Will print a lot of information related to how"
      write (OUTPUT_UNIT, fmt_oa) "OpenMP can place its threads."
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_opt_a) "kernel", "how the OpenMP distribution is done"
      write (OUTPUT_UNIT, fmt_oa) " - do -> use parallel do clause"
      write (OUTPUT_UNIT, fmt_oa) " - workshare -> use parallel workshare clause"
      write (OUTPUT_UNIT, fmt_oa) " - taskloop -> use parallel taskloop clause"
      write (OUTPUT_UNIT, fmt_oa) "   the default grainsize is 1, use OMP_SCHEDULE chunksize for size"
      write (OUTPUT_UNIT, fmt_oa) "   E.g. OMP_SCHEDULE=static,1000"
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_opt_a) "dtype", "which data-type to use"
      write (OUTPUT_UNIT, fmt_oa) " - real32|32 -> 4-byte real"
      write (OUTPUT_UNIT, fmt_oa) " - real64|64 -> 8-byte real [default]"
      write (OUTPUT_UNIT, fmt_oa) " - real128|128 -> 16-byte real"
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_opt_a) "first-touch", "use first-touch for arrays [default]"
      write (OUTPUT_UNIT, fmt_opt_a) "no-first-touch", "only let one thread initialize the arrays"
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_opt_a) "n", "the size of all arrays involved in the method"
      write (OUTPUT_UNIT, fmt_oa) "E.g. --n 2kB will allocate 2kB of memory"
      write (OUTPUT_UNIT, fmt_oa) "Understands kB, MB and GB."
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_opt_a) "warmup", "how many warm-up iterations are done before timing"
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_opt_a) "it", "how many iterations are done with timing"
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, '(a)') "The following argument options lists the names of the"
      write (OUTPUT_UNIT, '(a)') "methods, and *what* they do."
      write (OUTPUT_UNIT, fmt_nl)

      write (OUTPUT_UNIT, fmt_arg_a) "fill", "a(:) = 2."
      write (OUTPUT_UNIT, fmt_arg_a) "sum", "res = sum(a)"
      write (OUTPUT_UNIT, fmt_arg_a) "add", "a = b + c"
      write (OUTPUT_UNIT, fmt_arg_a) "copy", "a = b"
      write (OUTPUT_UNIT, fmt_arg_a) "scale", "a = b * 2"
      write (OUTPUT_UNIT, fmt_arg_a) "axpy", "a = a + b * 2"
      write (OUTPUT_UNIT, fmt_arg_a) "triad", "a = b + c * 2"
      write (OUTPUT_UNIT, fmt_arg_a) "fs-triad", "a = b + c * 2"
      write (OUTPUT_UNIT, fmt_aa) "Forcefully access arrays in false-sharing."
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl) "Examples:"
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl) "  "//trim(arg)//" -n 2MB axpy"
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl) "runs the axpy code, using 3 arrays totalling 2MB of memory."

      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl) "  "//trim(arg)//" -no-first-touch -kernel taskloop -dtype 32 -n 2GB triad -it 200 -warmup 2"
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl) "runs the triad method using the taskloop kernel, 4-byte reals, 3 arrays of total 2GB,"
      write (OUTPUT_UNIT, fmt_nl) "running 2 warmup iterations, then 200 iterations, without first-touch of the arrays."

      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl) "Output of the command."

      write (OUTPUT_UNIT, fmt_nl) "Running the benchmark routine returns data in the following columns:"
      write (OUTPUT_UNIT, fmt_nl)
      write (OUTPUT_UNIT, fmt_nl) "DTYPE METHOD KERNEL MEM_MB TIME_MIN TIME_AVG TIME_STD TIME_MAX BANDWIDTH_GBS GFLOPS"

      write (OUTPUT_UNIT, fmt_nl)
   end subroutine

end program
